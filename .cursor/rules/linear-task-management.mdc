---
description: 
globs: 
alwaysApply: true
---
# Linear タスク管理ワークフロー

## プロジェクト設定

### チーム情報
- **Team ID**: `255ca393-b786-454f-b205-8f59cbc4dcdd`
- **Team Name**: IPaaser_hub
- **Team Key**: IPA

### 主要プロジェクト

#### LP Builder プロジェクト
- **Project ID**: `b8101409-52b2-457c-8510-441621ebc5d0`
- **Project Name**: LP-builder-proj
- **Status**: planned

#### その他アクティブプロジェクト
- **Myろじん**: `be916c68-ae50-4cc0-9bce-da6fb6d8f826` (started)
- **サイトビルダー**: `5eb20f65-73ea-4fb1-8edb-891c45e6ccd6` (started)
- **ECサイトブランド分析**: `faa953f6-d3b3-4e1c-a628-7764c0930557` (started)
- **不動産案件**: `83b6191a-9ba4-4d0c-9f60-3b31e1a91b46` (started)

## ワークフロー状態

### 状態一覧とID
- **Backlog**: `c5ff1669-c989-4807-b6d3-8e8dcc9ce096` (未着手)
- **Todo**: `3dc4010e-8ae5-413f-84d6-2f2701841892` (準備完了)
- **In Progress**: `34dcd059-aea6-41ff-adfe-d9353bc8630e` (作業中)
- **Done**: `bba3ce00-3184-43c6-a748-7102e7576b0d` (完了)
- **Canceled**: `a2223af2-9632-4455-9517-ef78abc1acd2` (キャンセル)
- **Duplicate**: `8f765850-e346-4f63-be18-47f5d74b4826` (重複)

## タスク管理ルール

### 1. タスク開始時のルール
- タスクを開始する際は、必ず状態を **"In Progress"** (`34dcd059-aea6-41ff-adfe-d9353bc8630e`) に変更する
- 開始時に以下を確認・更新:
  - 担当者の設定
  - 期限の設定
  - 適切なプロジェクトへの紐付け
  - 必要なラベルの付与

### 2. タスク完了時のルール

#### テストが必要な場合
1. **開発作業完了後**:
   - コードレビューの実施
   - 単体テスト・結合テストの実行
   - 品質チェックの完了
2. **テスト完了後に "Done" に変更**:
   - 状態を **"Done"** (`bba3ce00-3184-43c6-a748-7102e7576b0d`) に更新
   - テスト結果をコメントで記録
   - 必要に応じて関連するissueにリンク

#### テストが不要な場合
- 設計書作成、調査タスクなど
- 直接 **"Done"** (`bba3ce00-3184-43c6-a748-7102e7576b0d`) に変更可能

### 3. タスク作成時のルール
- 新規タスクは以下の情報を必須で設定:
  - **Title**: 明確で具体的なタスク名
  - **Team ID**: `255ca393-b786-454f-b205-8f59cbc4dcdd`
  - **Project ID**: 該当するプロジェクトID
  - **Description**: 作業内容、受け入れ条件、関連資料のリンク
  - **Priority**: 緊急度に応じて設定 (1=Urgent, 2=High, 3=Normal, 4=Low)

### 4. コミュニケーションルール
- 作業開始時: issue作成者やチームメンバーにメンション
- ブロッカー発生時: すぐにコメントで報告
- 完了時: 作業内容の簡潔な報告

### 5. プロジェクト管理ルール
- LP Builder関連のタスクは必ず **LP-builder-proj** (`b8101409-52b2-457c-8510-441621ebc5d0`) に紐付け
- プロジェクト横断的なタスクは適切にラベル付けして管理
- 定期的にプロジェクトの進捗状況を確認・更新

## 使用例

### タスク開始時
```typescript
// タスクを In Progress に移動
await updateIssue({
  id: "IPA-123",
  stateId: "34dcd059-aea6-41ff-adfe-d9353bc8630e", // In Progress
  assigneeId: "user-id"
});
```

### タスク完了時 (テスト必要)
```typescript
// テスト完了後に Done に移動
await updateIssue({
  id: "IPA-123",
  stateId: "bba3ce00-3184-43c6-a748-7102e7576b0d" // Done
});

// 完了コメントを追加
await createComment({
  issueId: "IPA-123",
  body: "✅ テスト完了\n- 単体テスト: PASS\n- 結合テスト: PASS\n- コードレビュー: 承認済み"
});
```

このワークフローに従って、効率的なタスク管理を実現しましょう。
